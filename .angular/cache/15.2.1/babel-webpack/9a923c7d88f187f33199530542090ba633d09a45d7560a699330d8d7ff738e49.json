{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction QuestionPageComponent_tr_13_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const answer_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(answer_r3);\n  }\n}\nfunction QuestionPageComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\")(4, \"ul\");\n    i0.ɵɵtemplate(5, QuestionPageComponent_tr_13_li_5_Template, 2, 1, \"li\", 3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const question_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(question_r1.frage);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", question_r1.answers);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(question_r1.categoryName);\n  }\n}\nexport class QuestionPageComponent {\n  constructor(http) {\n    this.http = http;\n    this.questions = [];\n    this.categories = [];\n    this.answers = [];\n  }\n  getAnswerById(answerId, answers) {\n    const answer = answers.find(a => a.id === answerId);\n    return answer ? answer.antwort : '';\n  }\n  ngOnInit() {\n    const categoriesUrl = 'http://localhost:5002/kategorien';\n    const questionsUrl = 'http://localhost:5002/fragen';\n    const answersUrl = 'http://localhost:5002/antworten';\n    this.http.get(categoriesUrl).subscribe(categoriesResponse => {\n      this.categories = categoriesResponse;\n      this.http.get(questionsUrl).subscribe(questionsResponse => {\n        this.http.get(answersUrl).subscribe(answersResponse => {\n          this.answers = answersResponse;\n          this.questions = questionsResponse.map(question => {\n            const category = this.categories.find(cat => cat.id === question.kategorien_id);\n            const answers = [this.getAnswerById(question.falscheAntwort1, this.answers), this.getAnswerById(question.falscheAntwort2, this.answers), this.getAnswerById(question.falscheAntwort3, this.answers), this.getAnswerById(question.richtigeAntwort, this.answers)];\n            return {\n              ...question,\n              categoryName: category?.name,\n              answers\n            };\n          });\n        });\n      });\n    });\n  }\n}\nQuestionPageComponent.ɵfac = function QuestionPageComponent_Factory(t) {\n  return new (t || QuestionPageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nQuestionPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: QuestionPageComponent,\n  selectors: [[\"app-question-page\"]],\n  decls: 14,\n  vars: 1,\n  consts: [[1, \"container\"], [1, \"table\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function QuestionPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Questions\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"table\", 1)(4, \"thead\")(5, \"tr\")(6, \"th\", 2);\n      i0.ɵɵtext(7, \"Question\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"th\", 2);\n      i0.ɵɵtext(9, \"Answers\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\", 2);\n      i0.ɵɵtext(11, \"Category\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"tbody\");\n      i0.ɵɵtemplate(13, QuestionPageComponent_tr_13_Template, 8, 3, \"tr\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngForOf\", ctx.questions);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;IAecA,0BAA4C;IAAAA,YAAY;IAAAA,iBAAK;;;;IAAjBA,eAAY;IAAZA,+BAAY;;;;;IAJ9DA,0BAAuC;IACjCA,YAAoB;IAAAA,iBAAK;IAC7BA,0BAAI;IAEAA,0EAA6D;IAC/DA,iBAAK;IAEPA,0BAAI;IAAAA,YAA2B;IAAAA,iBAAK;;;;IANhCA,eAAoB;IAApBA,uCAAoB;IAGGA,eAAmB;IAAnBA,6CAAmB;IAG1CA,eAA2B;IAA3BA,8CAA2B;;;ACVzC,OAAM,MAAOC,qBAAqB;EAKhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJxB,cAAS,GAAe,EAAE;IAC1B,eAAU,GAAe,EAAE;IAC3B,YAAO,GAAe,EAAE;EAEgB;EAEhCC,aAAa,CAACC,QAAgB,EAAEC,OAAmB;IACzD,MAAMC,MAAM,GAAGD,OAAO,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,QAAQ,CAAC;IACnD,OAAOE,MAAM,GAAGA,MAAM,CAACI,OAAO,GAAG,EAAE;EACrC;EAEAC,QAAQ;IACN,MAAMC,aAAa,GAAG,kCAAkC;IACxD,MAAMC,YAAY,GAAG,8BAA8B;IACnD,MAAMC,UAAU,GAAG,iCAAiC;IAEpD,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAaH,aAAa,CAAC,CAACI,SAAS,CAAEC,kBAAkB,IAAI;MACxE,IAAI,CAACC,UAAU,GAAGD,kBAAkB;MAEpC,IAAI,CAACf,IAAI,CAACa,GAAG,CAAaF,YAAY,CAAC,CAACG,SAAS,CAAEG,iBAAiB,IAAI;QACtE,IAAI,CAACjB,IAAI,CAACa,GAAG,CAAaD,UAAU,CAAC,CAACE,SAAS,CAAEI,eAAe,IAAI;UAClE,IAAI,CAACf,OAAO,GAAGe,eAAe;UAE9B,IAAI,CAACC,SAAS,GAAGF,iBAAiB,CAACG,GAAG,CAACC,QAAQ,IAAG;YAChD,MAAMC,QAAQ,GAAG,IAAI,CAACN,UAAU,CAACX,IAAI,CAACkB,GAAG,IAAIA,GAAG,CAAChB,EAAE,KAAKc,QAAQ,CAACG,aAAa,CAAC;YAC/E,MAAMrB,OAAO,GAAG,CACd,IAAI,CAACF,aAAa,CAACoB,QAAQ,CAACI,eAAe,EAAE,IAAI,CAACtB,OAAO,CAAC,EAC1D,IAAI,CAACF,aAAa,CAACoB,QAAQ,CAACK,eAAe,EAAE,IAAI,CAACvB,OAAO,CAAC,EAC1D,IAAI,CAACF,aAAa,CAACoB,QAAQ,CAACM,eAAe,EAAE,IAAI,CAACxB,OAAO,CAAC,EAC1D,IAAI,CAACF,aAAa,CAACoB,QAAQ,CAACO,eAAe,EAAE,IAAI,CAACzB,OAAO,CAAC,CAC3D;YACD,OAAO;cAAE,GAAGkB,QAAQ;cAAEQ,YAAY,EAAEP,QAAQ,EAAEQ,IAAI;cAAE3B;YAAO,CAAE;UAC/D,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AArCWL,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAiC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDRlCtC,8BAAuB;MACfA,yBAAS;MAAAA,iBAAK;MAClBA,gCAAqB;MAGCA,wBAAQ;MAAAA,iBAAK;MAC7BA,6BAAgB;MAAAA,uBAAO;MAAAA,iBAAK;MAC5BA,8BAAgB;MAAAA,yBAAQ;MAAAA,iBAAK;MAGjCA,8BAAO;MACLA,sEAQK;MACPA,iBAAQ;;;MATmBA,gBAAY;MAAZA,uCAAY","names":["i0","QuestionPageComponent","constructor","http","getAnswerById","answerId","answers","answer","find","a","id","antwort","ngOnInit","categoriesUrl","questionsUrl","answersUrl","get","subscribe","categoriesResponse","categories","questionsResponse","answersResponse","questions","map","question","category","cat","kategorien_id","falscheAntwort1","falscheAntwort2","falscheAntwort3","richtigeAntwort","categoryName","name","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/tomhanks/Documents/Develop/BBB/M151/Code_Angular_Project/src/app/dashboard/question-page/question-page.component.html","/Users/tomhanks/Documents/Develop/BBB/M151/Code_Angular_Project/src/app/dashboard/question-page/question-page.component.ts"],"sourcesContent":["<div class=\"container\">\n    <h1>Questions</h1>\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Question</th>\n          <th scope=\"col\">Answers</th>\n          <th scope=\"col\">Category</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let question of questions\">\n          <td>{{ question.frage }}</td>\n          <td>\n            <ul>\n              <li *ngFor=\"let answer of question.answers\">{{ answer }}</li>\n            </ul>\n          </td>\n          <td>{{ question.categoryName }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-question-page',\n  templateUrl: './question-page.component.html',\n  styleUrls: ['./question-page.component.css']\n})\nexport class QuestionPageComponent implements OnInit {\n  questions: Array<any> = [];\n  categories: Array<any> = [];\n  answers: Array<any> = [];\n\n  constructor(private http: HttpClient) { }\n\n  private getAnswerById(answerId: number, answers: Array<any>): string {\n    const answer = answers.find(a => a.id === answerId);\n    return answer ? answer.antwort : '';\n  }\n\n  ngOnInit() {\n    const categoriesUrl = 'http://localhost:5002/kategorien';\n    const questionsUrl = 'http://localhost:5002/fragen';\n    const answersUrl = 'http://localhost:5002/antworten';\n  \n    this.http.get<Array<any>>(categoriesUrl).subscribe((categoriesResponse) => {\n      this.categories = categoriesResponse;\n  \n      this.http.get<Array<any>>(questionsUrl).subscribe((questionsResponse) => {\n        this.http.get<Array<any>>(answersUrl).subscribe((answersResponse) => {\n          this.answers = answersResponse;\n  \n          this.questions = questionsResponse.map(question => {\n            const category = this.categories.find(cat => cat.id === question.kategorien_id);\n            const answers = [\n              this.getAnswerById(question.falscheAntwort1, this.answers),\n              this.getAnswerById(question.falscheAntwort2, this.answers),\n              this.getAnswerById(question.falscheAntwort3, this.answers),\n              this.getAnswerById(question.richtigeAntwort, this.answers),\n            ];\n            return { ...question, categoryName: category?.name, answers };\n          });\n        });\n      });\n    });\n  }\n\n  \n  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}