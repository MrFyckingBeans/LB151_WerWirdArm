{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuestionPageComponent {\n  constructor(http) {\n    this.http = http;\n    this.questions = [];\n    this.categories = [];\n  }\n  ngOnInit() {\n    const categoriesUrl = 'http://localhost:5002/kategorien';\n    const questionsUrl = 'http://localhost:5002/fragen';\n    const answersUrl = 'http://localhost:5002/antworten';\n    this.http.get(categoriesUrl).subscribe(categoriesResponse => {\n      this.categories = categoriesResponse;\n      this.http.get(questionsUrl).subscribe(questionsResponse => {\n        this.http.get(answersUrl).subscribe(answersResponse => {\n          this.answers = answersResponse;\n          this.questions = questionsResponse.map(question => {\n            const category = this.categories.find(cat => cat.id === question.kategorien_id);\n            const answers = [this.getAnswerById(question.falscheAntwort1, this.answers), this.getAnswerById(question.falscheAntwort2, this.answers), this.getAnswerById(question.falscheAntwort3, this.answers), this.getAnswerById(question.richtigeAntwort, this.answers)];\n            return {\n              ...question,\n              categoryName: category?.name,\n              answers\n            };\n          });\n        });\n      });\n    });\n  }\n  getAnswerById(answerId, answers) {\n    const answer = answers.find(a => a.id === answerId);\n    return answer ? answer.antwort : '';\n  }\n}\nQuestionPageComponent.ɵfac = function QuestionPageComponent_Factory(t) {\n  return new (t || QuestionPageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nQuestionPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: QuestionPageComponent,\n  selectors: [[\"app-question-page\"]],\n  decls: 2,\n  vars: 0,\n  template: function QuestionPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"question-page works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,qBAAqB;EAIhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHxB,cAAS,GAAe,EAAE;IAC1B,eAAU,GAAe,EAAE;EAEa;EAExCC,QAAQ;IACN,MAAMC,aAAa,GAAG,kCAAkC;IACxD,MAAMC,YAAY,GAAG,8BAA8B;IACnD,MAAMC,UAAU,GAAG,iCAAiC;IAEpD,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAaH,aAAa,CAAC,CAACI,SAAS,CAAEC,kBAAkB,IAAI;MACxE,IAAI,CAACC,UAAU,GAAGD,kBAAkB;MAEpC,IAAI,CAACP,IAAI,CAACK,GAAG,CAAaF,YAAY,CAAC,CAACG,SAAS,CAAEG,iBAAiB,IAAI;QACtE,IAAI,CAACT,IAAI,CAACK,GAAG,CAAaD,UAAU,CAAC,CAACE,SAAS,CAAEI,eAAe,IAAI;UAClE,IAAI,CAACC,OAAO,GAAGD,eAAe;UAE9B,IAAI,CAACE,SAAS,GAAGH,iBAAiB,CAACI,GAAG,CAACC,QAAQ,IAAG;YAChD,MAAMC,QAAQ,GAAG,IAAI,CAACP,UAAU,CAACQ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKJ,QAAQ,CAACK,aAAa,CAAC;YAC/E,MAAMR,OAAO,GAAG,CACd,IAAI,CAACS,aAAa,CAACN,QAAQ,CAACO,eAAe,EAAE,IAAI,CAACV,OAAO,CAAC,EAC1D,IAAI,CAACS,aAAa,CAACN,QAAQ,CAACQ,eAAe,EAAE,IAAI,CAACX,OAAO,CAAC,EAC1D,IAAI,CAACS,aAAa,CAACN,QAAQ,CAACS,eAAe,EAAE,IAAI,CAACZ,OAAO,CAAC,EAC1D,IAAI,CAACS,aAAa,CAACN,QAAQ,CAACU,eAAe,EAAE,IAAI,CAACb,OAAO,CAAC,CAC3D;YACD,OAAO;cAAE,GAAGG,QAAQ;cAAEW,YAAY,EAAEV,QAAQ,EAAEW,IAAI;cAAEf;YAAO,CAAE;UAC/D,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEQS,aAAa,CAACO,QAAgB,EAAEhB,OAAmB;IACzD,MAAMiB,MAAM,GAAGjB,OAAO,CAACK,IAAI,CAACa,CAAC,IAAIA,CAAC,CAACX,EAAE,KAAKS,QAAQ,CAAC;IACnD,OAAOC,MAAM,GAAGA,MAAM,CAACE,OAAO,GAAG,EAAE;EACrC;;AApCWhC,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAiC;EAAAC;EAAAC;EAAAC;IAAA;MCRlCC,yBAAG;MAAAA,oCAAoB;MAAAA,iBAAI","names":["QuestionPageComponent","constructor","http","ngOnInit","categoriesUrl","questionsUrl","answersUrl","get","subscribe","categoriesResponse","categories","questionsResponse","answersResponse","answers","questions","map","question","category","find","cat","id","kategorien_id","getAnswerById","falscheAntwort1","falscheAntwort2","falscheAntwort3","richtigeAntwort","categoryName","name","answerId","answer","a","antwort","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/tomhanks/Documents/Develop/BBB/M151/Code_Angular_Project/src/app/dashboard/question-page/question-page.component.ts","/Users/tomhanks/Documents/Develop/BBB/M151/Code_Angular_Project/src/app/dashboard/question-page/question-page.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-question-page',\n  templateUrl: './question-page.component.html',\n  styleUrls: ['./question-page.component.css']\n})\nexport class QuestionPageComponent implements OnInit {\n  questions: Array<any> = [];\n  categories: Array<any> = [];\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n    const categoriesUrl = 'http://localhost:5002/kategorien';\n    const questionsUrl = 'http://localhost:5002/fragen';\n    const answersUrl = 'http://localhost:5002/antworten';\n  \n    this.http.get<Array<any>>(categoriesUrl).subscribe((categoriesResponse) => {\n      this.categories = categoriesResponse;\n  \n      this.http.get<Array<any>>(questionsUrl).subscribe((questionsResponse) => {\n        this.http.get<Array<any>>(answersUrl).subscribe((answersResponse) => {\n          this.answers = answersResponse;\n  \n          this.questions = questionsResponse.map(question => {\n            const category = this.categories.find(cat => cat.id === question.kategorien_id);\n            const answers = [\n              this.getAnswerById(question.falscheAntwort1, this.answers),\n              this.getAnswerById(question.falscheAntwort2, this.answers),\n              this.getAnswerById(question.falscheAntwort3, this.answers),\n              this.getAnswerById(question.richtigeAntwort, this.answers),\n            ];\n            return { ...question, categoryName: category?.name, answers };\n          });\n        });\n      });\n    });\n  }\n\n  private getAnswerById(answerId: number, answers: Array<any>): string {\n    const answer = answers.find(a => a.id === answerId);\n    return answer ? answer.antwort : '';\n  }\n  \n\n}\n","<p>question-page works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}