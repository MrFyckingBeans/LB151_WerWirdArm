{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet CategoryHighscorePageComponent = class CategoryHighscorePageComponent {\n  constructor(http, router, fb) {\n    this.http = http;\n    this.router = router;\n    this.fb = fb;\n    this.newRow = {};\n    this.scoreForm = this.fb.group({\n      spieler: ['', Validators.required],\n      punktzahl: ['', [Validators.required, Validators.min(0)]],\n      start: ['', [Validators.required]],\n      ende: ['', [Validators.required]],\n      kategorien_id: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    const url = 'http://localhost:5002/spiele';\n    this.http.get(url).subscribe(response => {\n      this.highscore = response;\n    });\n  }\n  prepareScoreData(score) {\n    const startISO = this.convertToISODate(score.start);\n    const endeISO = this.convertToISODate(score.ende);\n    return {\n      spieler: score.spieler,\n      punktzahl: score.punktzahl,\n      start: startISO,\n      ende: endeISO,\n      kategorien_id: score.kategorien_id\n    };\n  }\n  convertToISODate(dateString) {\n    const date = new Date(dateString);\n    return date.toISOString();\n  }\n  addNewRow() {\n    this.newRow = {\n      editing: true\n    };\n  }\n  submitNewScore() {\n    if (this.scoreForm.valid) {\n      const score = this.scoreForm.value;\n      const url = 'http://localhost:5002/spiele';\n      this.http.post(url, this.prepareScoreData(score)).subscribe(() => {\n        this.newRow = {};\n        score.editing = false;\n      });\n    }\n  }\n  deleteScore(score) {\n    const url = `http://localhost:5002/spiele/${score.id}`;\n    this.http.delete(url).subscribe(() => {\n      this.highscore = this.highscore.filter(s => s.id !== score.id);\n    });\n  }\n  durationQuiz(score) {\n    const start = new Date(score.start);\n    const end = new Date(score.ende);\n    const duration = (end.getTime() - start.getTime()) / 1000;\n    return duration;\n  }\n  weightedPoints(score) {\n    const duration = this.durationQuiz(score);\n    const weightedPoints = score.punktzahl / duration;\n    return weightedPoints;\n  }\n};\nCategoryHighscorePageComponent = __decorate([Component({\n  selector: 'app-category-highscore-page',\n  templateUrl: './category-highscore-page.component.html',\n  styleUrls: ['./category-highscore-page.component.css']\n})], CategoryHighscorePageComponent);\nexport { CategoryHighscorePageComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","CategoryHighscorePageComponent","constructor","http","router","fb","scoreForm","group","spieler","required","punktzahl","min","start","ende","kategorien_id","ngOnInit","url","get","subscribe","response","highscore","prepareScoreData","score","startISO","convertToISODate","endeISO","dateString","date","Date","toISOString","addNewRow","newRow","editing","submitNewScore","valid","value","post","deleteScore","id","delete","filter","s","durationQuiz","end","duration","getTime","weightedPoints","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/tomhanks/Documents/Develop/BBB/M151/Code_Angular_Project/src/app/dashboard/category-highscore-page/category-highscore-page.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-category-highscore-page',\n  templateUrl: './category-highscore-page.component.html',\n  styleUrls: ['./category-highscore-page.component.css']\n})\nexport class CategoryHighscorePageComponent implements OnInit {\n  highscore!: Array<any>;\n  newRow: any = {};\n  scoreForm: FormGroup;\n\n  constructor(private http: HttpClient, private router: Router, private fb: FormBuilder) {\n    this.scoreForm = this.fb.group({\n      spieler: ['', Validators.required],\n      punktzahl: ['', [Validators.required, Validators.min(0)]],\n      start: ['', [Validators.required]],\n      ende: ['', [Validators.required]],\n      kategorien_id: ['', Validators.required],\n    });\n  }\n\n  ngOnInit() {\n    const url = 'http://localhost:5002/spiele';\n    this.http.get<Array<any>>(url).subscribe((response) => {\n      this.highscore = response;\n    });\n  }\n\n  prepareScoreData(score: any) {\n    const startISO = this.convertToISODate(score.start);\n    const endeISO = this.convertToISODate(score.ende);\n\n    return {\n      spieler: score.spieler,\n      punktzahl: score.punktzahl,\n      start: startISO,\n      ende: endeISO,\n      kategorien_id: score.kategorien_id\n    };\n  }\n\n  convertToISODate(dateString: string) {\n    const date = new Date(dateString);\n    return date.toISOString();\n  }\n\n  addNewRow() {\n    this.newRow = {\n      editing: true\n    };\n  }\n\n  submitNewScore() {\n    if (this.scoreForm.valid) {\n      const score = this.scoreForm.value;\n      const url = 'http://localhost:5002/spiele';\n      this.http.post(url, this.prepareScoreData(score)).subscribe(() => {\n        this.newRow = {};\n        score.editing = false;\n      });\n    }\n  }\n\n  deleteScore(score: any) {\n    const url = `http://localhost:5002/spiele/${score.id}`;\n    this.http.delete(url).subscribe(() => {\n      this.highscore = this.highscore.filter(s => s.id !== score.id);\n    });\n  }\n\n  durationQuiz(score: any): number {\n    const start = new Date(score.start);\n    const end = new Date(score.ende);\n    const duration = (end.getTime() - start.getTime()) / 1000;\n    return duration;\n  }\n\n  weightedPoints(score: any): number {\n    const duration = this.durationQuiz(score);\n    const weightedPoints = score.punktzahl / duration;\n    return weightedPoints;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}