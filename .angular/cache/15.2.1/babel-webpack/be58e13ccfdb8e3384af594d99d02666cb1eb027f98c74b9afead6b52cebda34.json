{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet QuizPageComponent = class QuizPageComponent {\n  constructor(http) {\n    this.http = http;\n    this.questions = [];\n    this.currentAnswers = [];\n  }\n  ngOnInit() {\n    this.playerData = JSON.parse(localStorage.getItem('playerdata') || '{}');\n    this.getQuestions();\n  }\n  getQuestions() {\n    const questionsUrl = 'http://localhost:5002/fragen';\n    const answersUrl = 'http://localhost:5002/antworten';\n    this.http.get(questionsUrl).subscribe(questionsResponse => {\n      this.http.get(answersUrl).subscribe(answersResponse => {\n        const filteredQuestions = questionsResponse.filter(q => q.kategorien_id === this.playerData.kategorien_id);\n        filteredQuestions.forEach(question => {\n          const questionAnswers = answersResponse.filter(a => a.frage_id === question.id);\n          this.questions.push({\n            ...question,\n            answers: questionAnswers\n          });\n        });\n        this.displayRandomQuestion();\n      });\n    });\n  }\n  displayRandomQuestion() {\n    const randomIndex = Math.floor(Math.random() * this.questions.length);\n    this.currentQuestion = this.questions[randomIndex];\n    this.currentAnswers = this.currentQuestion.answers;\n  }\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n  answerQuestion(selectedAnswer) {\n    console.log('User selected answer:', selectedAnswer);\n  }\n};\nQuizPageComponent = __decorate([Component({\n  selector: 'app-quiz-page',\n  templateUrl: './quiz-page.component.html',\n  styleUrls: ['./quiz-page.component.css']\n})], QuizPageComponent);\nexport { QuizPageComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAO5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALxB,cAAS,GAAU,EAAE;IAErB,mBAAc,GAAU,EAAE;EAGc;EAExCC,QAAQ;IACN,IAAI,CAACC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC;IACxE,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAY;IACV,MAAMC,YAAY,GAAG,8BAA8B;IACnD,MAAMC,UAAU,GAAG,iCAAiC;IACpD,IAAI,CAACT,IAAI,CAACU,GAAG,CAAQF,YAAY,CAAC,CAACG,SAAS,CAAEC,iBAAwB,IAAI;MACxE,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAQD,UAAU,CAAC,CAACE,SAAS,CAAEE,eAAsB,IAAI;QACpE,MAAMC,iBAAiB,GAAGF,iBAAiB,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,aAAa,KAAK,IAAI,CAACf,UAAU,CAACe,aAAa,CAAC;QAC1GH,iBAAiB,CAACI,OAAO,CAACC,QAAQ,IAAG;UACnC,MAAMC,eAAe,GAAGP,eAAe,CAACE,MAAM,CAACM,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKH,QAAQ,CAACI,EAAE,CAAC;UAC/E,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC;YAClB,GAAGN,QAAQ;YACXO,OAAO,EAAEN;WACV,CAAC;QACJ,CAAC,CAAC;QACF,IAAI,CAACO,qBAAqB,EAAE;MAC9B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAA,qBAAqB;IACnB,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAACP,SAAS,CAACQ,MAAM,CAAC;IACrE,IAAI,CAACC,eAAe,GAAG,IAAI,CAACT,SAAS,CAACI,WAAW,CAAC;IAClD,IAAI,CAACM,cAAc,GAAG,IAAI,CAACD,eAAe,CAACP,OAAO;EACpD;EAGAS,OAAO,CAACC,KAAY;IAClB,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACJ,MAAM,GAAG,CAAC,EAAEK,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAMC,CAAC,GAAGT,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIM,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACD,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACE,CAAC,CAAC,CAAC,GAAG,CAACF,KAAK,CAACE,CAAC,CAAC,EAAEF,KAAK,CAACC,CAAC,CAAC,CAAC;;EAE/C;EAEAE,cAAc,CAACC,cAAmB;IAChCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,cAAc,CAAC;EACtD;CAED;AAlDY1C,iBAAiB,eAL7BD,SAAS,CAAC;EACT8C,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW/C,iBAAiB,CAkD7B;SAlDYA,iBAAiB","names":["Component","QuizPageComponent","constructor","http","ngOnInit","playerData","JSON","parse","localStorage","getItem","getQuestions","questionsUrl","answersUrl","get","subscribe","questionsResponse","answersResponse","filteredQuestions","filter","q","kategorien_id","forEach","question","questionAnswers","a","frage_id","id","questions","push","answers","displayRandomQuestion","randomIndex","Math","floor","random","length","currentQuestion","currentAnswers","shuffle","array","i","j","answerQuestion","selectedAnswer","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/tomhanks/Documents/Develop/BBB/M151/Code_Angular_Project/src/app/quiz-page/quiz-page.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-quiz-page',\n  templateUrl: './quiz-page.component.html',\n  styleUrls: ['./quiz-page.component.css']\n})\nexport class QuizPageComponent implements OnInit {\n  playerData: any;\n  questions: any[] = [];\n  currentQuestion: any;\n  currentAnswers: any[] = [];\n\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit() {\n    this.playerData = JSON.parse(localStorage.getItem('playerdata') || '{}');\n    this.getQuestions();\n  }\n\n  getQuestions() {\n    const questionsUrl = 'http://localhost:5002/fragen';\n    const answersUrl = 'http://localhost:5002/antworten';\n    this.http.get<any[]>(questionsUrl).subscribe((questionsResponse: any[]) => {\n      this.http.get<any[]>(answersUrl).subscribe((answersResponse: any[]) => {\n        const filteredQuestions = questionsResponse.filter(q => q.kategorien_id === this.playerData.kategorien_id);\n        filteredQuestions.forEach(question => {\n          const questionAnswers = answersResponse.filter(a => a.frage_id === question.id);\n          this.questions.push({\n            ...question,\n            answers: questionAnswers\n          });\n        });\n        this.displayRandomQuestion();\n      });\n    });\n  }\n\n  displayRandomQuestion() {\n    const randomIndex = Math.floor(Math.random() * this.questions.length);\n    this.currentQuestion = this.questions[randomIndex];\n    this.currentAnswers = this.currentQuestion.answers;\n  }\n  \n\n  shuffle(array: any[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  answerQuestion(selectedAnswer: any) {\n    console.log('User selected answer:', selectedAnswer);\n  }\n  \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}